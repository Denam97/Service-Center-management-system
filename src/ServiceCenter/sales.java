/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ServiceCenter;

import DBconnection.DB;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdom.Element;

/**
 *
 * @author Shehan Atapattu
 */
public class sales extends javax.swing.JFrame {

    /**
     * Creates new form sales
     */
    public sales() {
        initComponents();
        loadCombo();
    }

    view v = new view();

    public void loadCombo() {
        ResultSet rs = v.getTable("SELECT DISTINCT(`ItemName`) FROM `item`");
        item.removeAllItems();
        try {
            while (rs.next()) {

                item.addItem(rs.getString(1));
            }
            item.setSelectedIndex(-1);

        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cus = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        home = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        dis = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        bcpanel = new javax.swing.JLayeredPane();
        jLabel8 = new javax.swing.JLabel();
        qty = new javax.swing.JFormattedTextField();
        totable = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        item = new javax.swing.JComboBox();
        code = new javax.swing.JComboBox();
        brand = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        date = new datechooser.beans.DateChooserCombo();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1205, 843));

        jPanel1.setMinimumSize(new java.awt.Dimension(1205, 843));
        jPanel1.setPreferredSize(new java.awt.Dimension(1205, 843));
        jPanel1.setLayout(null);

        cus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusActionPerformed(evt);
            }
        });
        jPanel1.add(cus);
        cus.setBounds(180, 200, 280, 30);

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item", "Qty", "Unit Price(Rs)", "Discount(Rs)", "Total(Rs)"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(120, 310, 970, 230);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Customer:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(90, 190, 110, 40);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("Discount: Rs");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(880, 160, 120, 70);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText(" Total: Rs");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(800, 590, 90, 40);

        home.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        home.setText("Home");
        home.setPreferredSize(new java.awt.Dimension(127, 27));
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        jPanel1.add(home);
        home.setBounds(90, 660, 127, 40);

        jButton3.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jButton3.setText("Save & Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(930, 660, 150, 40);

        dis.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                disInputMethodTextChanged(evt);
            }
        });
        dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disActionPerformed(evt);
            }
        });
        dis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                disKeyPressed(evt);
            }
        });
        jPanel1.add(dis);
        dis.setBounds(990, 180, 90, 30);

        total.setEditable(false);
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        jPanel1.add(total);
        total.setBounds(890, 590, 190, 40);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Item:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(540, 140, 50, 24);

        jButton4.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jButton4.setText("Delete");
        jButton4.setPreferredSize(new java.awt.Dimension(127, 27));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(600, 660, 127, 40);

        javax.swing.GroupLayout bcpanelLayout = new javax.swing.GroupLayout(bcpanel);
        bcpanel.setLayout(bcpanelLayout);
        bcpanelLayout.setHorizontalGroup(
            bcpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );
        bcpanelLayout.setVerticalGroup(
            bcpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );

        jPanel1.add(bcpanel);
        bcpanel.setBounds(70, 280, 216, 94);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Quantity:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(500, 220, 90, 24);

        qty.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyKeyReleased(evt);
            }
        });
        jPanel1.add(qty);
        qty.setBounds(600, 220, 70, 30);

        totable.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        totable.setText("ADD");
        totable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totableActionPerformed(evt);
            }
        });
        jPanel1.add(totable);
        totable.setBounds(990, 240, 100, 40);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Date:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(130, 140, 50, 40);

        jButton2.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jButton2.setText("Clear");
        jButton2.setPreferredSize(new java.awt.Dimension(127, 27));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(770, 660, 127, 40);

        item.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemItemStateChanged(evt);
            }
        });
        item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                itemMousePressed(evt);
            }
        });
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActionPerformed(evt);
            }
        });
        jPanel1.add(item);
        item.setBounds(600, 140, 210, 30);

        jPanel1.add(code);
        code.setBounds(990, 140, 190, 30);

        brand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandActionPerformed(evt);
            }
        });
        jPanel1.add(brand);
        brand.setBounds(600, 180, 210, 30);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Item Model:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(880, 140, 110, 24);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(960, 290, 0, 2);

        date.setCalendarPreferredSize(new java.awt.Dimension(500, 300));
        date.setFormat(0);
        date.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        date.setFieldFont(new java.awt.Font("Ebrima", java.awt.Font.PLAIN, 13));
        jPanel1.add(date);
        date.setBounds(180, 140, 280, 40);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Item Brand:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(480, 180, 100, 24);

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sariya1200.jpg"))); // NOI18N
        jPanel1.add(jLabel11);
        jLabel11.setBounds(0, 0, 1190, 790);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1190, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 787, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cusActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel mdl = (DefaultTableModel) tbl.getModel();
        mdl.setRowCount(0);
        total.setText("");
        dis.setText("");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel mdl = (DefaultTableModel) tbl.getModel();
            mdl.removeRow(tbl.getSelectedRow());
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        // TODO add your handling code here:
        this.dispose();
        DashBoard dbd = new DashBoard();
        dbd.setVisible(true);
    }//GEN-LAST:event_homeActionPerformed

    private void itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActionPerformed


    }//GEN-LAST:event_itemActionPerformed
    int adder = 0;
    private void totableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totableActionPerformed

        String Brand = brand.getSelectedItem().toString();
        String model = code.getSelectedItem().toString();
        if (!(qty.getText().equals("") || brand.getSelectedItem().toString().equals("") || code.getSelectedItem().toString().equals(""))) {

            if (adder == 0 && discounter != 0) {
                double price1 = 0;

                ResultSet rs1 = v.getTable("SELECT `Price`,ItemID FROM `item` WHERE Brand='" + Brand + "' && Model='" + model + "'");
                String itemid = "";

                try {
                    while (rs1.next()) {

                        price1 = rs1.getDouble(1);
                        itemid = rs1.getString(2);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
                }

                DefaultTableModel model1 = (DefaultTableModel) tbl.getModel();
                double total1 = Integer.valueOf(qty.getText()) * (price1 - Double.parseDouble(dis.getText()));

                model1.addRow(new Object[]{itemid, Brand + " " + model, qty.getText(), price1, dis.getText(), total1});
                double ttal = 0.0;
                for (int i = 0; i < model1.getRowCount(); i++) {
                    ttal = ttal + Double.valueOf(model1.getValueAt(i, 5).toString());

                }

                total.setText(String.valueOf(ttal));

                item.setSelectedIndex(-1);
                brand.setSelectedIndex(-1);
                code.setSelectedIndex(-1);
                qty.setText("");
                dis.setText("");

                discounter = 0;
                adder = 0;

            } else if (discounter != 0 && adder != 0) {
                DefaultTableModel model1 = (DefaultTableModel) tbl.getModel();
                double total1 = Integer.valueOf(qty.getText()) * (Double.parseDouble(model1.getValueAt(model1.getRowCount() - 1, 3).toString()) - Double.parseDouble(dis.getText()));

                model1.setValueAt(total1, tbl.getModel().getRowCount() - 1, 5);
                double ttal = 0.0;
                for (int i = 0; i < model1.getRowCount(); i++) {
                    ttal = ttal + Double.valueOf(model1.getValueAt(i, 5).toString());

                }
                tbl.getModel().setValueAt(dis.getText(), tbl.getModel().getRowCount() - 1, 4);
                total.setText(String.valueOf(ttal));

                item.setSelectedIndex(-1);
                brand.setSelectedIndex(-1);
                code.setSelectedIndex(-1);
                qty.setText("");
                dis.setText("");

                discounter = 0;
                adder = 0;
            } else {
                adder++;
                double price = 0;

                int Qty = Integer.valueOf(qty.getText());
                if (v.check("SELECT `totalstock` FROM `item` WHERE Brand='" + Brand + "' && Model='" + model + "'", Qty)) {
                    ResultSet rs = v.getTable("SELECT `Price`,ItemID FROM `item` WHERE Brand='" + Brand + "' && Model='" + model + "'");
                    String itemid = "";
                    try {

                        while (rs.next()) {
                            price = rs.getDouble(1);
                            itemid = rs.getString(2);
                        }
                        if (!itemid.equals("")) {
                            double total1 = Qty * price;
                            DefaultTableModel model1 = (DefaultTableModel) tbl.getModel();
                            model1.addRow(new Object[]{itemid, Brand + " " + model, Qty, price, "0", total1});
                            double ttal = 0.0;
                            for (int i = 0; i < model1.getRowCount(); i++) {
                                ttal = ttal + Double.valueOf(model1.getValueAt(i, 5).toString());

                            }
                            total.setText(String.valueOf(ttal));
                        } else {
                            JOptionPane.showMessageDialog(null, "Item invalid!");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Product Out of Stock!");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Pls fill the relevant fields!");
        }
    }//GEN-LAST:event_totableActionPerformed

    private void itemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemMousePressed

    }//GEN-LAST:event_itemMousePressed

    private void itemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemItemStateChanged
        brand.removeAllItems();
        code.removeAllItems();
        if (!(item.getSelectedIndex() == -1)) {
            String mat = item.getSelectedItem().toString();
            try {
                ResultSet rs1 = v.getTable("SELECT DISTINCT(`Brand`) FROM `item` WHERE ItemName='" + mat + "'");
                ResultSet rs2 = v.getTable("SELECT DISTINCT(`Model`) FROM `item` WHERE ItemName='" + mat + "'");
                while (rs1.next()) {
                    brand.addItem(rs1.getString(1));
                }
                while (rs2.next()) {
                    code.addItem(rs2.getString(1));
                }
                brand.setSelectedIndex(-1);
                code.setSelectedIndex(-1);
            } catch (SQLException ex) {
                Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_itemItemStateChanged

    private void disKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_disKeyPressed
        discounter++;
        String dis1=dis.getText();
          int len=dis1.length();
  if(evt.getKeyChar()>='0'&& evt.getKeyChar()<='9'){
          dis.setEditable(true);
      }else{
          
        if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE||evt.getExtendedKeyCode()==KeyEvent.VK_PERIOD){
          // allo edit
            if(len<4){
          dis.setEditable(true);}
            else{
            dis.setEditable(false);
            }
      }else{
           dis.setEditable(false);
      }}      
    }//GEN-LAST:event_disKeyPressed
    int discounter = 0;
    
    private void disActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disActionPerformed


    }//GEN-LAST:event_disActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed

        String Brand = brand.getSelectedItem().toString();
        String model = code.getSelectedItem().toString();
        if (discounter != 0) {

            tbl.getModel().setValueAt(dis.getText(), tbl.getModel().getRowCount() - 1, 4);

            double total1 = Integer.valueOf(qty.getText()) * Double.parseDouble(dis.getText());
            DefaultTableModel model1 = (DefaultTableModel) tbl.getModel();
            model1.setValueAt(total1, tbl.getModel().getRowCount() - 1, 5);
            double ttal = 0.0;
            for (int i = 0; i < model1.getRowCount(); i++) {
                ttal = ttal + Double.valueOf(model1.getValueAt(i, 5).toString());

            }
            total.setText(String.valueOf(ttal));

            item.setSelectedIndex(-1);
            brand.setSelectedIndex(-1);
            code.setSelectedIndex(-1);
            qty.setText("");
            dis.setText("");

            discounter = 0;
        } else {
            double price = 0;
            String itemID = "";
            if (!(qty.getText().equals("") || brand.getSelectedItem().toString().equals("") || code.getSelectedItem().toString().equals(""))) {

                int Qty = Integer.valueOf(qty.getText());
                if (v.check("SELECT `totalstock` FROM `item` WHERE Brand='" + Brand + "' && Model='" + model + "'", Qty)) {
                    ResultSet rs = v.getTable("SELECT `Price`,ItemID FROM `item` WHERE Brand='" + Brand + "' && Model='" + model + "'");
                    String itemid = null;
                    try {

                        while (rs.next()) {
                            price = rs.getDouble(1);
                            itemid = rs.getString(2);
                        }
                        double total1 = Qty * price;
                        DefaultTableModel model1 = (DefaultTableModel) tbl.getModel();
                        model1.addRow(new Object[]{itemid, Brand + " " + model, Qty, price, "0", total1});
                        double ttal = 0.0;
                        for (int i = 0; i < model1.getRowCount(); i++) {
                            ttal = ttal + Double.valueOf(model1.getValueAt(i, 5).toString());

                        }
                        total.setText(String.valueOf(ttal));

                    } catch (SQLException ex) {
                        Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Product Out of Stock!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Pls fill the relevant fields!");
            }
        }
    }//GEN-LAST:event_qtyActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        view v = new view();
        String invNo = "";
        ResultSet rs = v.getTable("SELECT InvoiceNo FROM sales");

        try {
            while (rs.next()) {
                invNo = String.valueOf((Integer.parseInt(rs.getString(1))) + 1);
            }
            if (invNo.equals("")) {
                invNo = "1";
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }
        String customer = cus.getText();
        if (customer.equals("")) {
            JOptionPane.showMessageDialog(null, "Pls enter customer name");
        } else {

            if (!(total.getText().equals(""))) {

                String dt = new SimpleDateFormat("yyyy-MM-dd").format(date.getSelectedDate().getTime());

                String val = total.getText();

                double tal = Double.valueOf(total.getText());

                v.insert("INSERT INTO sales VALUES('" + dt + "','" + invNo + "','" + customer + "','" + val + "')");
                PreparedStatement pst;
                ResultSet rst;
                for (int i = 0; i < tbl.getRowCount(); i++) {
                    try {
                        pst = DB.mycon().prepareStatement("UPDATE `item` SET `TotalStock`=(TotalStock-" + Integer.parseInt(tbl.getValueAt(i, 2).toString()) + ") WHERE `ItemID`='" + tbl.getValueAt(i, 0) + "'");
                        pst.execute();
                    } catch (SQLException ex) {
                        Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    v.insert("INSERT INTO sell VALUES('" + tbl.getValueAt(i, 0) + "','" + invNo + "','" + tbl.getValueAt(i, 3) + "','" + tbl.getValueAt(i, 4) + "','" + tbl.getValueAt(i, 2) + "')");

                }
                //JOptionPane.showMessageDialog(null, "Done!");
                print(invNo);
            } else {
                JOptionPane.showMessageDialog(null, "Pls enter the items");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void print(String invNo) {
        String today = new SimpleDateFormat("yyyy-MM-dd hh:mm").format(Calendar.getInstance().getTime());
        String customer = cus.getText();
        JFileChooser dialog = new JFileChooser();
        dialog.setSelectedFile(new File(customer + ".pdf"));
        int dialogResult = dialog.showSaveDialog(null);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            try {
                String filePath = dialog.getSelectedFile().getPath();

                Document myDocument = new Document();
                PdfWriter myWriter = PdfWriter.getInstance(myDocument, new FileOutputStream(filePath));
                PdfPTable table = new PdfPTable(6);
                myDocument.open();
                myWriter.setPageEvent(new MyPdfPageEventHelper("saman.png"));
                myDocument.add(new Paragraph("\n\n\n\n\n\n\n\n\n"));
                float[] columnWidths = new float[]{3, 8, 5, 5, 5, 5};
                table.setWidths(columnWidths);

                table.setWidthPercentage(100); //set table width to 100%

                Paragraph ph = new Paragraph("INVOICE\n", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD));
                ph.setAlignment(Paragraph.ALIGN_CENTER);
                myDocument.add(ph);
                myDocument.add(new Paragraph("\n\n"));
                myDocument.add(new Paragraph("\n\n"));

                String adf = new SimpleDateFormat("dd-MM-yyyy").format(new Date());

                myDocument.add(new Paragraph("Invoice No: " + invNo + "                                                                                                               " + "Date :" + adf + "\n", FontFactory.getFont(FontFactory.TIMES, 12)));

                myDocument.add(new Paragraph("Customer: " + customer, FontFactory.getFont(FontFactory.TIMES, 12)));
                myDocument.add(new Paragraph("\n"));
                myDocument.add(new Paragraph("\t\t\t\t\t\t\t\t"));

                myDocument.add(new Paragraph("Sales", FontFactory.getFont(FontFactory.TIMES, 12)));

                myDocument.add(new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD)));
                myDocument.add(new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD)));
                myDocument.add(new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD)));
                myDocument.add(new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD)));
                myDocument.add(new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD)));

                table.addCell(new PdfPCell(new Paragraph("Item ID", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));
                table.addCell(new PdfPCell(new Paragraph("Item", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));
                table.addCell(new PdfPCell(new Paragraph("Quantity", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));
                table.addCell(new PdfPCell(new Paragraph("Unit Price", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));
                table.addCell(new PdfPCell(new Paragraph("Discount", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));
                table.addCell(new PdfPCell(new Paragraph("Total", FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD))));

                for (int i = 0; i < tbl.getRowCount(); i++) {

                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 0).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));
                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 1).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));
                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 2).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));
                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 3).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));
                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 4).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));
                    table.addCell(new PdfPCell(new Paragraph(tbl.getValueAt(i, 5).toString(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.PLAIN))));

                }

                myDocument.add(table);
                myDocument.add(new Paragraph(""));
                myDocument.add(new Paragraph("\n\n\n"));
                double t = Double.valueOf(total.getText());

                Paragraph st = new Paragraph("Sales Total:Rs " + t, FontFactory.getFont(FontFactory.TIMES, 12));
                st.setAlignment(Paragraph.ALIGN_RIGHT);
                myDocument.add(st);
                myDocument.add(new Paragraph("\n\n"));

                Paragraph pt = new Paragraph("Thank You!\n", FontFactory.getFont(FontFactory.TIMES, 12));
                pt.setAlignment(Paragraph.ALIGN_CENTER);
                myDocument.add(pt);
                myDocument.add(new Paragraph("\n"));
                myDocument.add(new Paragraph("--------------------------------------------------------------------------------------------------------------------------------"));
                myDocument.close();
                JOptionPane.showMessageDialog(null, "Report was successfully generated");
            } catch (DocumentException ex) {
                Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        total.setText("");
        dis.setText("");
        DefaultTableModel mdl = (DefaultTableModel) tbl.getModel();
        mdl.setRowCount(0);
        cus.setText("");

    }

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void disInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_disInputMethodTextChanged

    }//GEN-LAST:event_disInputMethodTextChanged

    private void brandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandActionPerformed
        ResultSet rs = v.getTable("select Model from item where Brand='" + brand.getSelectedItem() + "'");
        code.removeAllItems();
        try {
            while (rs.next()) {
                code.addItem(rs.getString(1));

            }
        } catch (SQLException ex) {
            Logger.getLogger(StockUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brandActionPerformed

    private void qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyReleased

    }//GEN-LAST:event_qtyKeyReleased

    private void qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyPressed
         String ph=qty.getText();
      
      int len=ph.length();
      char c= evt.getKeyChar();
      // check the character
      if(evt.getKeyChar()>='0'&& evt.getKeyChar()<='9'){
          
      if(len<3){
      qty.setEditable(true);
      }else{
      qty.setEditable(false);
      
      }
      }
      else{
      //erase number 'backspace work'
      if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
          // allo edit
          qty.setEditable(true);
      }else{
           qty.setEditable(false);
      }
      }
    }//GEN-LAST:event_qtyKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane bcpanel;
    private javax.swing.JComboBox brand;
    private javax.swing.JComboBox code;
    private javax.swing.JTextField cus;
    private datechooser.beans.DateChooserCombo date;
    private javax.swing.JTextField dis;
    private javax.swing.JButton home;
    private javax.swing.JComboBox item;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFormattedTextField qty;
    private javax.swing.JTable tbl;
    private javax.swing.JButton totable;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
